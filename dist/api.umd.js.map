{"version":3,"file":"api.umd.js","sources":["../src/api.js"],"sourcesContent":["/**\n * Auto register API routes from the OpenAPI specification.\n */\nclass ApiRoutes {\n    /**\n     * Set the specification.\n     *\n     * @param {object} OpenAPISpecification\n     * @param {class} Backend\n     * @param {function} callback\n     * @param {string} root\n     */\n    constructor(OpenAPISpecification, Backend, callback, root) {\n        this.logger = null;\n        this.specification = OpenAPISpecification;\n        this.callback = callback;\n        this.controllers = {};\n        this.api = new Backend({\n            // Use the first server url as api root.\n            // @todo CDB2BGAZ-3755: Support multiple servers\n            apiRoot: root || OpenAPISpecification.servers[0].url,\n            definition: OpenAPISpecification,\n        });\n    }\n\n    /**\n     * Set the logger.\n     *\n     * @param {class} logger\n     */\n    setLogger(logger) {\n        this.logger = logger;\n    }\n\n    /**\n     * Set the controllers.\n     *\n     * @param {object} controllers\n     */\n    setControllers(controllers) {\n        if (controllers === null || controllers.constructor.name !== 'Object') {\n            throw new Error('No valid controllers found');\n        }\n\n        this.controllers = controllers;\n    }\n\n    /**\n     * Get all operation ID's from the specification.\n     *\n     * @return {array}\n     */\n    get operationIds() {\n        return Object.values(this.specification.paths).map((path) => {\n            if (path.get) {\n                return path.get.operationId;\n            }\n\n            if (path.post) {\n                return path.post.operationId;\n            }\n\n            return null;\n        });\n    }\n\n    /**\n     * Register all operations to a controller.\n     */\n    register() {\n        this.operationIds.forEach((operationId) => {\n            this.api.register(\n                operationId,\n                this.callback(\n                    this.controllers[operationId],\n                    this.specification,\n                    this.logger\n                )\n            );\n        });\n\n        if (this.controllers?.notFound) {\n            this.api.register(\n                'notFound',\n                this.callback(\n                    this.controllers.notFound,\n                    this.specification,\n                    this.logger\n                )\n            );\n        }\n\n        this.api.init();\n    }\n\n    authentication(secret) {\n        this.api.register(\n            'unauthorizedHandler',\n            async (context, request, response) =>\n                response.status(401).json({\n                    status: 401,\n                    timestamp: new Date(),\n                    message: 'Unauthorized',\n                })\n        );\n        this.api.registerSecurityHandler(\n            'apiKey',\n            (context) => context.request.headers['x-api-key'] === secret\n        );\n    }\n\n    /**\n     * Create the API routes from a specification.\n     *\n     * @param {object} specification\n     * @param {string} secret\n     * @param {class} Backend\n     * @param {class} logger\n     * @param {function} callback\n     * @param {object} controllers\n     * @param {string} root\n     *\n     * @return {OpenAPIBackend}\n     */\n    static create({\n        specification,\n        secret,\n        Backend,\n        logger,\n        callback,\n        controllers,\n        root,\n    }) {\n        const apiRoutes = new ApiRoutes(specification, Backend, callback, root);\n\n        apiRoutes.setControllers(controllers);\n        if (logger) {\n            apiRoutes.setLogger(logger);\n        }\n\n        if (secret) {\n            apiRoutes.authentication(secret);\n        }\n\n        apiRoutes.register();\n\n        return apiRoutes.api;\n    }\n}\n\nexport { ApiRoutes };\n"],"names":["ApiRoutes","constructor","OpenAPISpecification","Backend","callback","root","logger","specification","controllers","api","apiRoot","servers","url","definition","setLogger","setControllers","name","Error","operationIds","Object","values","paths","map","path","get","operationId","post","register","forEach","notFound","init","authentication","secret","context","request","response","status","json","timestamp","Date","message","registerSecurityHandler","headers","create","apiRoutes"],"mappings":";;;;;IAAA;IACA;IACA;IACA,MAAMA,SAAN,CAAgB;IACZ;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACIC,EAAAA,WAAW,CAACC,oBAAD,EAAuBC,OAAvB,EAAgCC,QAAhC,EAA0CC,IAA1C,EAAgD;IACvD,SAAKC,MAAL,GAAc,IAAd;IACA,SAAKC,aAAL,GAAqBL,oBAArB;IACA,SAAKE,QAAL,GAAgBA,QAAhB;IACA,SAAKI,WAAL,GAAmB,EAAnB;IACA,SAAKC,GAAL,GAAW,IAAIN,OAAJ,CAAY;IACnB;IACA;IACAO,MAAAA,OAAO,EAAEL,IAAI,IAAIH,oBAAoB,CAACS,OAArB,CAA6B,CAA7B,EAAgCC,GAH9B;IAInBC,MAAAA,UAAU,EAAEX;IAJO,KAAZ,CAAX;IAMH;IAED;IACJ;IACA;IACA;IACA;;;IACIY,EAAAA,SAAS,CAACR,MAAD,EAAS;IACd,SAAKA,MAAL,GAAcA,MAAd;IACH;IAED;IACJ;IACA;IACA;IACA;;;IACIS,EAAAA,cAAc,CAACP,WAAD,EAAc;IACxB,QAAIA,WAAW,KAAK,IAAhB,IAAwBA,WAAW,CAACP,WAAZ,CAAwBe,IAAxB,KAAiC,QAA7D,EAAuE;IACnE,YAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;IACH;;IAED,SAAKT,WAAL,GAAmBA,WAAnB;IACH;IAED;IACJ;IACA;IACA;IACA;;;IACI,MAAIU,YAAJ,GAAmB;IACf,WAAOC,MAAM,CAACC,MAAP,CAAc,KAAKb,aAAL,CAAmBc,KAAjC,EAAwCC,GAAxC,CAA6CC,IAAD,IAAU;IACzD,UAAIA,IAAI,CAACC,GAAT,EAAc;IACV,eAAOD,IAAI,CAACC,GAAL,CAASC,WAAhB;IACH;;IAED,UAAIF,IAAI,CAACG,IAAT,EAAe;IACX,eAAOH,IAAI,CAACG,IAAL,CAAUD,WAAjB;IACH;;IAED,aAAO,IAAP;IACH,KAVM,CAAP;IAWH;IAED;IACJ;IACA;;;IACIE,EAAAA,QAAQ,GAAG;IACP,SAAKT,YAAL,CAAkBU,OAAlB,CAA2BH,WAAD,IAAiB;IACvC,WAAKhB,GAAL,CAASkB,QAAT,CACIF,WADJ,EAEI,KAAKrB,QAAL,CACI,KAAKI,WAAL,CAAiBiB,WAAjB,CADJ,EAEI,KAAKlB,aAFT,EAGI,KAAKD,MAHT,CAFJ;IAQH,KATD;;IAWA,QAAI,KAAKE,WAAL,EAAkBqB,QAAtB,EAAgC;IAC5B,WAAKpB,GAAL,CAASkB,QAAT,CACI,UADJ,EAEI,KAAKvB,QAAL,CACI,KAAKI,WAAL,CAAiBqB,QADrB,EAEI,KAAKtB,aAFT,EAGI,KAAKD,MAHT,CAFJ;IAQH;;IAED,SAAKG,GAAL,CAASqB,IAAT;IACH;;IAEDC,EAAAA,cAAc,CAACC,MAAD,EAAS;IACnB,SAAKvB,GAAL,CAASkB,QAAT,CACI,qBADJ,EAEI,OAAOM,OAAP,EAAgBC,OAAhB,EAAyBC,QAAzB,KACIA,QAAQ,CAACC,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;IACtBD,MAAAA,MAAM,EAAE,GADc;IAEtBE,MAAAA,SAAS,EAAE,IAAIC,IAAJ,EAFW;IAGtBC,MAAAA,OAAO,EAAE;IAHa,KAA1B,CAHR;IASA,SAAK/B,GAAL,CAASgC,uBAAT,CACI,QADJ,EAEKR,OAAD,IAAaA,OAAO,CAACC,OAAR,CAAgBQ,OAAhB,CAAwB,WAAxB,MAAyCV,MAF1D;IAIH;IAED;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;IACI,SAAOW,MAAP,CAAc;IACVpC,IAAAA,aADU;IAEVyB,IAAAA,MAFU;IAGV7B,IAAAA,OAHU;IAIVG,IAAAA,MAJU;IAKVF,IAAAA,QALU;IAMVI,IAAAA,WANU;IAOVH,IAAAA;IAPU,GAAd,EAQG;IACC,UAAMuC,SAAS,GAAG,IAAI5C,SAAJ,CAAcO,aAAd,EAA6BJ,OAA7B,EAAsCC,QAAtC,EAAgDC,IAAhD,CAAlB;IAEAuC,IAAAA,SAAS,CAAC7B,cAAV,CAAyBP,WAAzB;;IACA,QAAIF,MAAJ,EAAY;IACRsC,MAAAA,SAAS,CAAC9B,SAAV,CAAoBR,MAApB;IACH;;IAED,QAAI0B,MAAJ,EAAY;IACRY,MAAAA,SAAS,CAACb,cAAV,CAAyBC,MAAzB;IACH;;IAEDY,IAAAA,SAAS,CAACjB,QAAV;IAEA,WAAOiB,SAAS,CAACnC,GAAjB;IACH;;IAhJW;;;;;;;;"}