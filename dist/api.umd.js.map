{"version":3,"file":"api.umd.js","sources":["../src/api.js"],"sourcesContent":["/**\n * Auto register API routes from the OpenAPI specification.\n */\nclass ApiRoutes {\n  /**\n   * Set the specification.\n   *\n   * @param {object} OpenAPISpecification\n   * @param {class} Backend\n   * @param {function} callback\n   * @param {string} root\n   * @param {mixed} meta\n   */\n  constructor (OpenAPISpecification, Backend, callback, root, meta) {\n    this.logger = null\n    this.specification = OpenAPISpecification\n    this.callback = callback\n    this.controllers = {}\n    this.meta = meta || {}\n    this.api = new Backend({\n      apiRoot: root || '/',\n      definition: OpenAPISpecification\n    })\n  }\n\n  get operations () {\n    return ['get', 'put', 'patch', 'post', 'delete']\n  }\n\n  /**\n     * Set the logger.\n     *\n     * @param {class} logger\n     */\n  setLogger (logger) {\n    this.logger = logger\n  }\n\n  /**\n     * Set the controllers.\n     *\n     * @param {object} controllers\n     */\n  setControllers (controllers) {\n    if (controllers === null || controllers.constructor.name !== 'Object') {\n      throw new Error('No valid controllers found')\n    }\n\n    this.controllers = controllers\n  }\n\n  /**\n     * Get all operation ID's from the specification.\n     * @todo: allow multipleoperation methods per path (e.g. get and post)\n     *\n     * @return {array}\n     */\n  get operationIds () {\n    return Object.values(this.specification.paths).map((path) => {\n      return Object.entries(path).map(([operation, data]) =>\n        this.operations.includes(operation) ? data.operationId : null\n      )\n    }).flat()\n  }\n\n  /**\n     * Register all operations to a controller.\n     */\n  register () {\n    this.operationIds.forEach((operationId) => {\n      this.api.register(\n        operationId,\n        this.callback({\n          controller: this.controllers[operationId],\n          specification: this.specification,\n          logger: this.logger,\n          meta: this.meta\n        })\n      )\n    })\n\n    if (this.controllers?.notFound) {\n      this.api.register(\n        'notFound',\n        this.callback({\n          controller: this.controllers.notFound,\n          specification: this.specification,\n          logger: this.logger,\n          meta: this.meta\n        })\n      )\n    }\n\n    this.api.init()\n  }\n\n  authentication (secret) {\n    this.api.register(\n      'unauthorizedHandler',\n      async (context, request, response) =>\n        response.status(401).json({\n          status: 401,\n          timestamp: new Date(),\n          message: 'Unauthorized'\n        })\n    )\n    this.api.registerSecurityHandler(\n      'apiKey',\n      (context) => context.request.headers['x-api-key'] === secret\n    )\n  }\n\n  requestValidation () {\n    this.api.register(\n      'validationFail',\n      (context, request, response) =>\n        response.status(400).json({\n          status: 400,\n          timestamp: new Date(),\n          message: context.validation.errors\n        })\n    )\n  }\n\n  responseValidation () {\n    this.api.register(\n      'postResponseHandler',\n      (context, request, response) => {\n        const validResponse = context.api.validateResponse(context.response, context.operation)\n\n        if (validResponse.errors) {\n          return response.status(502).json({\n            status: 502,\n            timestamp: new Date(),\n            message: validResponse.errors\n          })\n        }\n\n        const validHeaders = context.api.validateResponseHeaders(response.headers, context.operation, {\n          statusCode: response.statusCode,\n          setMatchType: 'exact'\n        })\n\n        if (validHeaders.errors) {\n          return response.status(502).json({\n            status: 502,\n            timestamp: new Date(),\n            message: validHeaders.errors\n          })\n        }\n\n        return response.status(200).json(context.response)\n      }\n    )\n  }\n\n  /**\n     * Create the API routes from a specification.\n     *\n     * @param {object} specification\n     * @param {string} secret\n     * @param {class} Backend\n     * @param {class} logger\n     * @param {function} callback\n     * @param {object} controllers\n     * @param {string} root\n     * @param {mixed} meta\n     * @param {boolean} requestValidation\n     * @param {boolean} responseValidation\n     *\n     * @return {ApiRoutes}\n     */\n  static create ({\n    specification,\n    secret,\n    Backend,\n    logger,\n    callback,\n    controllers,\n    root,\n    meta,\n    requestValidation = false,\n    responseValidation = false\n  } = {}) {\n    const apiRoutes = new ApiRoutes(specification, Backend, callback, root, meta)\n\n    apiRoutes.setControllers(controllers)\n    if (logger) {\n      apiRoutes.setLogger(logger)\n    }\n\n    if (secret) {\n      apiRoutes.authentication(secret)\n    }\n\n    if (requestValidation) {\n      apiRoutes.requestValidation()\n    }\n\n    if (responseValidation) {\n      apiRoutes.responseValidation()\n    }\n\n    apiRoutes.register()\n\n    return apiRoutes\n  }\n}\n\nexport { ApiRoutes }\n"],"names":["ApiRoutes","constructor","OpenAPISpecification","Backend","callback","root","meta","logger","specification","controllers","api","apiRoot","definition","operations","setLogger","setControllers","name","Error","operationIds","Object","values","paths","map","path","entries","operation","data","includes","operationId","flat","register","forEach","controller","notFound","init","authentication","secret","context","request","response","status","json","timestamp","Date","message","registerSecurityHandler","headers","requestValidation","validation","errors","responseValidation","validResponse","validateResponse","validHeaders","validateResponseHeaders","statusCode","setMatchType","create","apiRoutes"],"mappings":"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"}