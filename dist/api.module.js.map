{"version":3,"file":"api.module.js","sources":["../src/api.js"],"sourcesContent":["/**\n * Auto register API routes from the OpenAPI specification.\n */\nclass ApiRoutes {\n    /**\n     * Set the specification.\n     *\n     * @param {object} OpenAPISpecification\n     * @param {class} Backend\n     * @param {function} callback\n     * @param {string} root\n     */\n    constructor(OpenAPISpecification, Backend, callback, root) {\n        this.logger = null;\n        this.specification = OpenAPISpecification;\n        this.callback = callback;\n        this.controllers = {};\n        this.api = new Backend({\n            // Use the first server url as api root.\n            // @todo CDB2BGAZ-3755: Support multiple servers\n            apiRoot: root || OpenAPISpecification.servers[0].url,\n            definition: OpenAPISpecification,\n        });\n    }\n\n    get operations() {\n        return ['get', 'put', 'post', 'delete'];\n    }\n\n    /**\n     * Set the logger.\n     *\n     * @param {class} logger\n     */\n    setLogger(logger) {\n        this.logger = logger;\n    }\n\n    /**\n     * Set the controllers.\n     *\n     * @param {object} controllers\n     */\n    setControllers(controllers) {\n        if (controllers === null || controllers.constructor.name !== 'Object') {\n            throw new Error('No valid controllers found');\n        }\n\n        this.controllers = controllers;\n    }\n\n    /**\n     * Get all operation ID's from the specification.\n     *\n     * @return {array}\n     */\n    get operationIds() {\n        return Object.values(this.specification.paths).map((path) => {\n            const route = Object.entries(path).find(([operation, data]) =>\n                this.operations.includes(operation) ? data.operationId : null\n            );\n            return route[1]?.operationId;\n        });\n    }\n\n    /**\n     * Register all operations to a controller.\n     */\n    register() {\n        this.operationIds.forEach((operationId) => {\n            this.api.register(\n                operationId,\n                this.callback(\n                    this.controllers[operationId],\n                    this.specification,\n                    this.logger\n                )\n            );\n        });\n\n        if (this.controllers?.notFound) {\n            this.api.register(\n                'notFound',\n                this.callback(\n                    this.controllers.notFound,\n                    this.specification,\n                    this.logger\n                )\n            );\n        }\n\n        this.api.init();\n    }\n\n    authentication(secret) {\n        this.api.register(\n            'unauthorizedHandler',\n            async (context, request, response) =>\n                response.status(401).json({\n                    status: 401,\n                    timestamp: new Date(),\n                    message: 'Unauthorized',\n                })\n        );\n        this.api.registerSecurityHandler(\n            'apiKey',\n            (context) => context.request.headers['x-api-key'] === secret\n        );\n    }\n\n    /**\n     * Create the API routes from a specification.\n     *\n     * @param {object} specification\n     * @param {string} secret\n     * @param {class} Backend\n     * @param {class} logger\n     * @param {function} callback\n     * @param {object} controllers\n     * @param {string} root\n     *\n     * @return {OpenAPIBackend}\n     */\n    static create({\n        specification,\n        secret,\n        Backend,\n        logger,\n        callback,\n        controllers,\n        root,\n    }) {\n        const apiRoutes = new ApiRoutes(specification, Backend, callback, root);\n\n        apiRoutes.setControllers(controllers);\n        if (logger) {\n            apiRoutes.setLogger(logger);\n        }\n\n        if (secret) {\n            apiRoutes.authentication(secret);\n        }\n\n        apiRoutes.register();\n\n        return apiRoutes.api;\n    }\n}\n\nexport { ApiRoutes };\n"],"names":["ApiRoutes","constructor","OpenAPISpecification","Backend","callback","root","logger","specification","controllers","api","apiRoot","servers","url","definition","operations","setLogger","setControllers","name","Error","operationIds","Object","values","paths","map","path","route","entries","find","operation","data","includes","operationId","register","forEach","notFound","init","authentication","secret","context","request","response","status","json","timestamp","Date","message","registerSecurityHandler","headers","create","apiRoutes"],"mappings":"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"}