{"version":3,"file":"api.modern.js","sources":["../src/api.js"],"sourcesContent":["/**\n * Auto register API routes from the OpenAPI specification.\n */\nclass ApiRoutes {\n  /**\n   * Set the specification.\n   *\n   * @param {object} OpenAPISpecification\n   * @param {class} Backend\n   * @param {function} callback\n   * @param {string} root\n   * @param {mixed} meta\n   */\n  constructor (OpenAPISpecification, Backend, callback, root, meta) {\n    this.logger = null\n    this.specification = OpenAPISpecification\n    this.callback = callback\n    this.controllers = {}\n    this.meta = meta || {}\n    this.api = new Backend({\n      apiRoot: root || '/',\n      definition: OpenAPISpecification\n    })\n  }\n\n  get operations () {\n    return ['get', 'put', 'patch', 'post', 'delete']\n  }\n\n  /**\n     * Set the logger.\n     *\n     * @param {class} logger\n     */\n  setLogger (logger) {\n    this.logger = logger\n  }\n\n  /**\n     * Set the controllers.\n     *\n     * @param {object} controllers\n     */\n  setControllers (controllers) {\n    if (controllers === null || controllers.constructor.name !== 'Object') {\n      throw new Error('No valid controllers found')\n    }\n\n    this.controllers = controllers\n  }\n\n  /**\n     * Get all operation ID's from the specification.\n     * @todo: allow multipleoperation methods per path (e.g. get and post)\n     *\n     * @return {array}\n     */\n  get operationIds () {\n    return Object.values(this.specification.paths).map((path) => {\n      return Object.entries(path).map(([operation, data]) =>\n        this.operations.includes(operation) ? data.operationId : null\n      )\n    }).flat()\n  }\n\n  /**\n     * Register all operations to a controller.\n     */\n  register () {\n    this.operationIds.forEach((operationId) => {\n      this.api.register(\n        operationId,\n        this.callback({\n          controller: this.controllers[operationId],\n          specification: this.specification,\n          logger: this.logger,\n          meta: this.meta\n        })\n      )\n    })\n\n    if (this.controllers?.notFound) {\n      this.api.register(\n        'notFound',\n        this.callback({\n          controller: this.controllers.notFound,\n          specification: this.specification,\n          logger: this.logger,\n          meta: this.meta\n        })\n      )\n    }\n\n    this.api.init()\n  }\n\n  authentication (secret) {\n    this.api.register(\n      'unauthorizedHandler',\n      async (context, request, response) =>\n        response.status(401).json({\n          status: 401,\n          timestamp: new Date(),\n          message: 'Unauthorized'\n        })\n    )\n    this.api.registerSecurityHandler(\n      'apiKey',\n      (context) => context.request.headers['x-api-key'] === secret\n    )\n  }\n\n  /**\n     * Create the API routes from a specification.\n     *\n     * @param {object} specification\n     * @param {string} secret\n     * @param {class} Backend\n     * @param {class} logger\n     * @param {function} callback\n     * @param {object} controllers\n     * @param {string} root\n     * @param {mixed} meta\n     *\n     * @return {ApiRoutes}\n     */\n  static create ({\n    specification,\n    secret,\n    Backend,\n    logger,\n    callback,\n    controllers,\n    root,\n    meta\n  }) {\n    const apiRoutes = new ApiRoutes(specification, Backend, callback, root, meta)\n\n    apiRoutes.setControllers(controllers)\n    if (logger) {\n      apiRoutes.setLogger(logger)\n    }\n\n    if (secret) {\n      apiRoutes.authentication(secret)\n    }\n\n    apiRoutes.register()\n\n    return apiRoutes\n  }\n}\n\nexport { ApiRoutes }\n"],"names":["ApiRoutes","constructor","OpenAPISpecification","Backend","callback","root","meta","logger","specification","controllers","api","apiRoot","definition","operations","setLogger","setControllers","name","Error","operationIds","Object","values","paths","map","path","entries","operation","data","includes","operationId","flat","register","forEach","controller","notFound","init","authentication","secret","context","request","response","status","json","timestamp","Date","message","registerSecurityHandler","headers","create","apiRoutes"],"mappings":"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"}